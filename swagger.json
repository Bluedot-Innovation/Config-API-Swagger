{
  "swagger" : "2.0",
  "info" : {
    "description" : "Bluedot Innovation Configuration API\n[https://bluedot.io](https://bluedot.io)\nAuthentication: Use the sessions endpoint to obtain an accessToken, and then supply it in the Authorization header for subsequent requests\n",
    "version" : "1.1.39",
    "title" : "Bluedot Innovation Configuration API",
    "termsOfService" : "https://bluedot.io/terms/",
    "contact" : {
      "email" : "help@bluedot.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo" : {
      "url" : "https://raw.githubusercontent.com/Bluedot-Innovation/Config-API-Swagger/master/images/img-logo-be.png",
      "backgroundColor" : "#FFFFFF",
      "altText" : "Bluedot logo"
    }
  },
  "host" : "config.bluedot.io",
  "basePath" : "/prod1",
  "tags" : [ {
    "name" : "sessions",
    "description" : "Session management",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://bluedot.io"
    }
  }, {
    "name" : "users",
    "description" : "Operations about Users",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://bluedot.io"
    }
  }, {
    "name" : "projects",
    "description" : "Operations about Projects",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://bluedot.io"
    }
  }, {
    "name" : "zones",
    "description" : "Operations about Zones",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://bluedot.io"
    }
  }, {
    "name" : "beacons",
    "description" : "Operations about Beacons",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://bluedot.io"
    }
  }, {
    "name" : "tags",
    "description" : "Operations about Tags",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://bluedot.io"
    }
  }, {
    "name" : "credentials",
    "description" : "Operations about Credentials",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://bluedot.io"
    }
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/password/token-request" : {
      "post" : {
        "tags" : [ "credentials" ],
        "summary" : "Trigger a password reset token",
        "operationId" : "createTokenRequest",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Email address of account to be reset",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Email"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Password reset token successfully generated",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "some error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Invalid user",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Invalid user",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "##AUTHENTICATOR_URI",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{\"fun\": \"generatePasswordToken\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$')}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "204",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "credentials" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionPasswordResetRequest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'POST'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/password/token" : {
      "post" : {
        "tags" : [ "credentials" ],
        "summary" : "Use password reset token to change password",
        "operationId" : "resetPassword",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "credentials of account to be reset",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PasswordReset"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Password successfully reset",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/AuthenticationTokens"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "##AUTHENTICATOR_URI",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{\"fun\": \"resetPassword\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$')}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "credentials" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionPasswordReset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'POST'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/password/new" : {
      "post" : {
        "tags" : [ "credentials" ],
        "summary" : "Use the temporary password to change a newly created user's password",
        "operationId" : "createNewPassword",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "credentials of account to be reset",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PasswordNew"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Password successfully reset",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/AuthenticationTokens"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "##AUTHENTICATOR_URI",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{\"fun\": \"setNewUserPassword\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$')}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "credentials" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionPasswordNew",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'POST'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/tags" : {
      "get" : {
        "tags" : [ "tags" ],
        "summary" : "Get a list of all tags being used on zones by projectId",
        "description" : "Returns tags by projectId",
        "operationId" : "getTags",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "description" : "Project to search for tags in",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "lines", "borders", "stripes" ]
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.TagLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"searchTags\", \"token\":\"$input.params('Authorization')\", \"projectId\": \"$input.params('projectId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "tags" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionTags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,PUT,PATCH,POST,DELETE'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/sessions" : {
      "post" : {
        "tags" : [ "sessions" ],
        "summary" : "Authenticate a user",
        "operationId" : "createSession",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Credentials"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User authenticated",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/AuthenticationTokens"
            }
          },
          "400" : {
            "description" : "Invalid user",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "##AUTHENTICATOR_URI",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{\"fun\": \"login\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$')}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "sessions" ],
        "summary" : "Refreshe a session",
        "operationId" : "refreshSession",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "refreshToken",
          "description" : "a special token that can be used to obtain a renewed access token.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RefreshToken"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Session refreshed",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/AuthenticationRefreshTokens"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "##AUTHENTICATOR_URI",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{\"fun\": \"refresh\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$'), \"headers\": { #foreach($param in $input.params().header.keySet()) \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end #end }}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "sessions" ],
        "summary" : "Log a user out",
        "operationId" : "deleteSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "User logged out",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Invalid user",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "##AUTHENTICATOR_URI",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{\"fun\": \"logout\", \"httpMethod\": \"$context.httpMethod\", \"headers\": { #foreach($param in $input.params().header.keySet()) \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end #end }}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "sessions" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionSession",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'POST, PUT, DELETE, GET'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get all users",
        "operationId" : "searchUsers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"searchUsers\", \"token\": \"$input.params('Authorization')\", \"accountId\": \"$input.params('accountId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Add a user",
        "operationId" : "addUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User created",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/UserResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-request-validator" : "NONE",
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"postUser\", \"token\": \"$input.params('Authorization')\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "users" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST,PUT,DELETE'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Find user by userId",
        "description" : "Returns a single user",
        "operationId" : "getUserById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the user to return.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"getUser\", \"token\": \"$input.params('Authorization')\", \"userId\": \"$input.params('userId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Update a complete user",
        "operationId" : "replaceUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the user being updated.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User that needs to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User updated",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Invalid input",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"putUser\", \"token\": \"$input.params('Authorization')\", \"userId\": \"$input.params('userId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete a user",
        "operationId" : "deleteUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of user to be deleted.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "User deleted",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"deleteUser\", \"token\": \"$input.params('Authorization')\", \"httpMethod\": \"$context.httpMethod\", \"userId\": \"$input.params('userId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "users" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The identoifier of the user.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST,PUT,DELETE'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "users" ],
        "summary" : "Update a user",
        "operationId" : "updateUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of user to be patched.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "JsonPatch",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User patched",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "204" : {
            "description" : "User patched",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media"
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"patchUser\", \"token\": \"$input.params('Authorization')\", \"userId\": \"$input.params('userId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      }
    },
    "/projects" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get all projects by accountId",
        "operationId" : "getProjects",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "only required for administrative context switching",
          "required" : false,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ProjectResponse"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Project not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"searchProjects\", \"token\": \"$input.params('Authorization')\", \"accountId\": \"$input.params('accountId')\", \"tags\": \"$input.params('tags')\", \"textSearchTerm\": \"$input.params('textSearchTerm')\", \"limit\": \"$input.params('limit')\", \"offset\": \"$input.params('offset')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Add a project",
        "operationId" : "addProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Project object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Project created",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/ProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Project not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-request-validator" : "NONE",
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"postProject\", \"token\": \"$input.params('Authorization')\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "projects" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionProjects",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST, PUT, DELETE'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Find project by ID",
        "description" : "Returns a single project",
        "operationId" : "getProjectById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "description" : "The identifier of the project being returned.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/ProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Project not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"getProject\", \"token\": \"$input.params('Authorization')\", \"projectId\": \"$input.params('projectId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Update a complete project",
        "operationId" : "replaceProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "description" : "The identifier of the project being updated.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Project obtject that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project updated",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Invalid input",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Project not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"putProject\", \"token\": \"$input.params('Authorization')\", \"projectId\": \"$input.params('projectId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a project",
        "operationId" : "deleteProject",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "description" : "The identifier of the project being deleted.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "Zone deleted",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Project not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"deleteProject\", \"token\": \"$input.params('Authorization')\", \"httpMethod\": \"$context.httpMethod\", \"projectId\": \"$input.params('projectId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "projects" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "description" : "The identifier of the project.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST,PUT,DELETE,PATCH'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update an project",
        "operationId" : "updateProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "description" : "The identifier of the project being patched.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "JsonPatch",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project patched",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Project not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media"
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"patchProject\", \"token\": \"$input.params('Authorization')\", \"projectId\": \"$input.params('projectId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      }
    },
    "/zones" : {
      "get" : {
        "tags" : [ "zones" ],
        "summary" : "Get all zones by project Id",
        "description" : "Returns zones by query / default offset=0 / default limit=100",
        "operationId" : "getZones",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "description" : "The identifier of the project.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "tags / comma-separated list",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "textSearchTerm",
          "in" : "query",
          "description" : "Fuzzy search / comma-separate list / currently searches name & description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "How many results to return",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "How many results to offset",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "northeast",
          "in" : "query",
          "description" : "northeast coordinates (long,lat)",
          "required" : false,
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$"
        }, {
          "name" : "southwest",
          "in" : "query",
          "description" : "southwest coordinates (long,lat)",
          "required" : false,
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$"
        }, {
          "name" : "paginationToken",
          "in" : "header",
          "description" : "Pagination token as returned by the server",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Expose-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              },
              "x-bluedot-paginationToken" : {
                "type" : "string"
              }
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ZoneResponse"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"searchZones\", \"token\":\"$input.params('Authorization')\", \"projectId\": \"$input.params('projectId')\", \"tags\": \"$input.params('tags')\", \"textSearchTerm\": \"$input.params('textSearchTerm')\", \"limit\": \"$input.params('limit')\", \"offset\": \"$input.params('offset')\", \"paginationToken\": \"$input.params('x-bluedot-paginationToken')\", \"northeast\": \"$input.params('northeast')\", \"southwest\": \"$input.params('southwest')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Expose-Headers" : "'x-bluedot-paginationToken'",
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken,Access-Control-Request-Method, Access-Control-Request-Headers'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'",
                "method.response.header.x-bluedot-paginationToken" : "integration.response.body.headers.x-bluedot-paginationToken"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "zones" ],
        "summary" : "Add a zone to the project",
        "operationId" : "addZone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Zone object that needs to be added to the application",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Zone"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Zone created",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/ZoneResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-request-validator" : "NONE",
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"postZone\", \"token\": \"$input.params('Authorization')\", \"httpMethod\": \"$context.httpMethod\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "zones" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionZones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken,Access-Control-Request-Method, Access-Control-Request-Headers'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/zones/{zoneId}" : {
      "get" : {
        "tags" : [ "zones" ],
        "summary" : "Find a zone by zoneId",
        "description" : "Returns a single zone",
        "operationId" : "getZoneById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "zoneId",
          "in" : "path",
          "description" : "The identifier of the zone to return.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/ZoneResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"getZone\", \"token\": \"$input.params('Authorization')\", \"zoneId\": \"$input.params('zoneId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "zones" ],
        "summary" : "Replace a zone",
        "description" : "Returns a single zone",
        "operationId" : "replaceZone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "zoneId",
          "in" : "path",
          "description" : "The identifier of the zone being updated.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Zone object that needs to be added to the application",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ZoneResponse"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Zone updated",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone does not exist",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"putZone\", \"token\": \"$input.params('Authorization')\", \"zoneId\": \"$input.params('zoneId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "zones" ],
        "summary" : "Delete a zone",
        "operationId" : "deleteZone",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "zoneId",
          "in" : "path",
          "description" : "Zone id to delete",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "Zone deleted",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"deleteZone\", \"token\": \"$input.params('Authorization')\", \"httpMethod\": \"$context.httpMethod\", \"zoneId\": \"$input.params('zoneId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "zones" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionZone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "zoneId",
          "in" : "path",
          "description" : "The identifier of the zone.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,PUT,DELETE,PATCH'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "zones" ],
        "summary" : "Update a zone",
        "operationId" : "updateZone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "zoneId",
          "in" : "path",
          "description" : "zoneId",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "JsonPatch",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Zone patched",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media"
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"patchZone\", \"token\": \"$input.params('Authorization')\", \"zoneId\": \"$input.params('zoneId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      }
    },
    "/zones/clusters" : {
      "get" : {
        "tags" : [ "zones" ],
        "summary" : "Get zone clusters by project Id",
        "description" : "Returns an array of zoneClusters",
        "operationId" : "getZoneClusters",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "description" : "The identifier of the project being searched.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "name" : "northeast",
          "in" : "query",
          "description" : "northeast coordinates (long,lat)",
          "required" : true,
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$"
        }, {
          "name" : "southwest",
          "in" : "query",
          "description" : "southwest coordinates (long,lat)",
          "required" : true,
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$"
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "tags / comma-separated list",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "textSearchTerm",
          "in" : "query",
          "description" : "Fuzzy search / comma-separate list / currently searches name & description",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ZoneCluster"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"getZoneClusters\", \"token\":\"$input.params('Authorization')\", \"projectId\": \"$input.params('projectId')\", \"tags\": \"$input.params('tags')\", \"textSearchTerm\": \"$input.params('textSearchTerm')\", \"northeast\": \"$input.params('northeast')\", \"southwest\": \"$input.params('southwest')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "zones" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionZoneClusters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      }
    },
    "/zones/count" : {
      "get" : {
        "tags" : [ "zones" ],
        "summary" : "Get zones count per project Id",
        "description" : "Returns a number with the number of zones",
        "operationId" : "getZonesCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "query",
          "description" : "The identifier of the project being searched.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "tags / comma-separated list",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "textSearchTerm",
          "in" : "query",
          "description" : "Fuzzy search / comma-separate list / currently searches name & description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "northeast",
          "in" : "query",
          "description" : "northeast coordinates (long,lat)",
          "required" : false,
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$"
        }, {
          "name" : "southwest",
          "in" : "query",
          "description" : "southwest coordinates (long,lat)",
          "required" : false,
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/ZonesCount"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Zone not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"getZonesCount\", \"token\":\"$input.params('Authorization')\", \"projectId\": \"$input.params('projectId')\", \"tags\": \"$input.params('tags')\", \"textSearchTerm\": \"$input.params('textSearchTerm')\", \"northeast\": \"$input.params('northeast')\", \"southwest\": \"$input.params('southwest')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "zones" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionZonesCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      }
    },
    "/beacons" : {
      "get" : {
        "tags" : [ "beacons" ],
        "summary" : "Get all beacons by account",
        "operationId" : "getBeacons",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "only required for administrative context switching",
          "required" : false,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BeaconResponse"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Beacon not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"getBeacons\", \"accountId\": \"$input.params('accountId')\", \"token\":\"$input.params('Authorization')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "beacons" ],
        "summary" : "Add a beacon",
        "operationId" : "addBeacon",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Beacon object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Beacon"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Beacon created",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/BeaconResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Beacon not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "409" : {
            "description" : "Beacon already exists",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-request-validator" : "NONE",
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"postBeacon\", \"httpMethod\": \"$context.httpMethod\", \"token\": \"$input.params('Authorization')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "201",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "beacons" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionBeacons",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "x-amazon-apigateway-any-method" : {
        "consumes" : [ "application/json" ],
        "responses" : {
          "405" : {
            "description" : "405 response"
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 405}"
          },
          "passthroughBehavior" : "when_no_match",
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "405",
              "responseTemplates" : {
                "application/json" : "{\"message\": \"Method $context.httpMethod is not allowed for this endpoint.\"}"
              }
            }
          }
        }
      }
    },
    "/beacons/{beaconId}" : {
      "get" : {
        "tags" : [ "beacons" ],
        "summary" : "Find a beacon by beaconId",
        "description" : "Returns a single beacon",
        "operationId" : "getBeaconById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "beaconId",
          "in" : "path",
          "description" : "The identifier of the beacon to return.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            },
            "schema" : {
              "$ref" : "#/definitions/BeaconResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Beacon not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"getBeacon\", \"token\":\"$input.params('Authorization')\", \"beaconId\": \"$input.params('beaconId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "beacons" ],
        "summary" : "Update a complete beacon",
        "operationId" : "replaceBeacon",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "beaconId",
          "in" : "path",
          "description" : "beaconId",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Beacon object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Beacon"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Beacon updated",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Beacon not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"putBeacon\", \"token\":\"$input.params('Authorization')\", \"beaconId\": \"$input.params('beaconId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "beacons" ],
        "summary" : "Delete a beacon",
        "operationId" : "deleteBeacon",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "beaconId",
          "in" : "path",
          "description" : "beaconId",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "Beacon deleted",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Beacon not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"deleteBeacon\", \"token\":\"$input.params('Authorization')\", \"httpMethod\": \"$context.httpMethod\", \"beaconId\": \"$input.params('beaconId')\" }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      },
      "options" : {
        "tags" : [ "beacons" ],
        "summary" : "CORS support",
        "description" : "Enable CORS by returning correct headers",
        "operationId" : "optionBeacon",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "beaconId",
          "in" : "path",
          "description" : "The identifier of the beacon.",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        } ],
        "responses" : {
          "200" : {
            "description" : "Default response for CORS method",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "requestTemplates" : {
            "application/json" : "{\"statusCode\" : 200}"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods" : "'GET,PUT,DELETE,PATCH'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "{}"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "beacons" ],
        "summary" : "Update a beacon",
        "operationId" : "updateBeacon",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Token. Format: Bearer {{access_token}}",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "beaconId",
          "in" : "path",
          "description" : "beaconId",
          "required" : true,
          "type" : "string",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        }, {
          "in" : "body",
          "name" : "JsonPatch",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Beacon patched",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Beacon not found",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media"
          },
          "429" : {
            "description" : "Resource Exceeded",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          },
          "500" : {
            "description" : "Internal error",
            "headers" : {
              "Access-Control-Allow-Headers" : {
                "type" : "string"
              },
              "Access-Control-Allow-Methods" : {
                "type" : "string"
              },
              "Access-Control-Allow-Origin" : {
                "type" : "string"
              }
            }
          }
        },
        "security" : [ {
          "publicapi-custom-authorizer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "type" : "aws",
          "uri" : "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations",
          "httpMethod" : "POST",
          "passthroughBehavior" : "never",
          "requestTemplates" : {
            "application/json" : "{ \"fun\": \"patchBeacon\", \"token\":\"$input.params('Authorization')\", \"beaconId\": \"$input.params('beaconId')\", \"body\": $input.json('$') }"
          },
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.json('$.body')"
              }
            },
            ".*ValidationError.*" : {
              "statusCode" : "400",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*PermissionError.*" : {
              "statusCode" : "403",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*NotFoundError.*" : {
              "statusCode" : "404",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ResourceExceededError.*" : {
              "statusCode" : "429",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            },
            ".*ServerError.*" : {
              "statusCode" : "500",
              "responseParameters" : {
                "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Origin" : "'*'"
              },
              "responseTemplates" : {
                "application/json" : "$input.path('$.errorMessage')"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "publicapi-custom-authorizer" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header",
      "x-amazon-apigateway-authtype" : "custom",
      "x-amazon-apigateway-authorizer" : {
        "type" : "token",
        "authorizerUri" : "##CUSTOMAUTHORIZER_URI",
        "authorizerCredentials" : "arn:aws:iam::##AWS_ACCOUNT_NUMBER##:role/CONFIGURATION_API_apig_lambda_proxy",
        "authorizerResultTtlInSeconds" : 0
      }
    }
  },
  "definitions" : {
    "PatchRequest" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/PatchDocument"
      }
    },
    "PatchDocument" : {
      "type" : "object",
      "required" : [ "op", "path" ],
      "properties" : {
        "op" : {
          "type" : "string",
          "description" : "The operation to be performed. Only the `add`, `replace` and `remove` operations are supported at the moment.",
          "enum" : [ "add", "remove", "replace" ]
        },
        "path" : {
          "type" : "string",
          "description" : "A JSON-Pointer"
        },
        "value" : {
          "example" : "Can be any value - string, number, boolean, array or object.",
          "description" : "Can be any value - string, number, boolean, array or object."
        }
      },
      "description" : "A JSONPatch document as defined by RFC 6902."
    },
    "CustomData" : {
      "type" : "object",
      "description" : "A set of user-defined key-value pairs that will be passed to mobile and webhook callbacks upon trigger.",
      "additionalProperties" : {
        "type" : "string"
      }
    },
    "Point" : {
      "type" : "object",
      "required" : [ "latitude", "longitude" ],
      "properties" : {
        "longitude" : {
          "type" : "number",
          "example" : 144.9777056,
          "minimum" : -180,
          "maximum" : 180
        },
        "latitude" : {
          "type" : "number",
          "example" : -37.8128737,
          "minimum" : -90,
          "maximum" : 90
        }
      },
      "description" : "A point is an object that stores spatial geographic information (i.e longitude, latitude)"
    },
    "Circle" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Geofeature"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "circle",
            "default" : "circle"
          },
          "name" : {
            "type" : "string",
            "example" : "circle name"
          },
          "color" : {
            "type" : "string",
            "example" : "#FEFEFE"
          },
          "radius" : {
            "type" : "number",
            "example" : 10.0
          },
          "center" : {
            "$ref" : "#/definitions/Point"
          }
        }
      } ],
      "description" : "A circular geofence."
    },
    "Beacon" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "beacon name",
            "description" : "A distinct name for the Beacon being created."
          },
          "description" : {
            "type" : "string",
            "example" : "beacon description",
            "description" : "This optional field can be used to store any additional information such as the descriptive location of the Beacon."
          },
          "major" : {
            "type" : "integer",
            "example" : 20,
            "description" : "Required if the beaconType is either IOS or Both. The major value is an integer that can range from 0 to 65535; it identifies a grouping of iBeacons within a proximityUUID. For example; a Sanfransico location can be assigned 1 and a Melbourne location can be assigned 2.",
            "minimum" : 0,
            "maximum" : 65535
          },
          "minor" : {
            "type" : "integer",
            "example" : 10,
            "description" : "Required if the beaconType is either IOS or Both. The minor value is an integer that can range from 0 to 65535; it identifies a specific iBeacon within a proximityUUID and major value. For example; an iBeacon in a Sanfrancisco location can have 1 for major value and 25 as a minor value.",
            "minimum" : 0,
            "maximum" : 65535
          },
          "macAddress" : {
            "type" : "string",
            "example" : "00-14-22-01-23-45",
            "description" : "Required if the beaconType is either Android or Both. This is the hardware address of the Bluetooth Beacon. The MAC address can be obtained from the manufacturer of a Beacon or using the configuration app provided by the manufacturer. An example of Mac Address is ’00-15-E9-2B-99-3C’."
          },
          "txPower" : {
            "type" : "integer",
            "example" : -10,
            "description" : "Required if the beaconType is either Android or Both. The Tx Power (transmit power) is a configuration setting common to all Bluetooth Beacons. This is set by the Beacon manufacturer and may be shown in the documentation or be configurable with a supplied tool. The range of Tx Power is -100 to 0.",
            "minimum" : -100,
            "maximum" : 0
          },
          "proximityUUID" : {
            "type" : "string",
            "example" : "de305d54-75b4-431b-adb2-eb6b9e546014",
            "description" : "Required if the beaconType is either IOS or Both. A value that encapsulates a group of iBeacons. ProximityUUID is specific to the Apple iBeacon standard and the Bluedot Point SDK for Android does not use this to identify or trigger a Beacon. It is recommended to have the same proximityUUID for all iBeacons deployed within a given organization and use major and minor values to identify a specific Beacon. An example of a proximityUUID is “de305d54-75b4-431b-adb2-eb6b9e546014”. A proximityUUID is required to create an iBeacon in Bluedot Systems. The proximityUUID can be obtained from the manufacturer of an iBeacon or using a configuration app provided by the manufacturer.",
            "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "beaconType" : {
            "type" : "string",
            "example" : "IOS",
            "description" : "The target mobile platform for the Beacon",
            "enum" : [ "IOS", "Android", "Both" ]
          },
          "location" : {
            "$ref" : "#/definitions/Point"
          },
          "accountId" : {
            "type" : "string",
            "example" : "11111111-75b4-431b-adb2-eb6b9e546014",
            "description" : "The identifier of the account."
          }
        }
      }, { } ],
      "description" : "A Bluetooth beacon that can be used across multiple zones."
    },
    "BeaconResponse" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "example" : "ec09f506-44c8-482d-92d0-4ee57d5c42b4",
            "description" : "The identifier of the beacon."
          }
        }
      }, {
        "$ref" : "#/definitions/Beacon"
      } ],
      "description" : "Beacon response"
    },
    "ZoneBeacon" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Beacon"
      }, {
        "type" : "object",
        "properties" : {
          "proximity" : {
            "type" : "string",
            "example" : "Near",
            "enum" : [ "Immediate", "Near", "Far" ]
          }
        }
      } ],
      "description" : "A Bluetooth beacon that is being added to a zone. This can be an existing beacon created previously using the /beacons or /zones endpoints, or a new beacon."
    },
    "Geoline" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Geofeature"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "geoline",
            "default" : "geoline"
          },
          "name" : {
            "type" : "string",
            "example" : "Geoline name"
          },
          "vertices" : {
            "type" : "array",
            "example" : [ {
              "longitude" : -37.812873,
              "latitude" : 144.977705
            }, {
              "longitude" : -37.810212,
              "latitude" : 144.98307
            } ],
            "items" : {
              "$ref" : "#/definitions/Point"
            }
          }
        }
      } ],
      "description" : "A virtual tripwire in the physical world that will cause a callback to be fired if a device crosses over it."
    },
    "Polygon" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Geofeature"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "polygon",
            "default" : "polygon"
          },
          "name" : {
            "type" : "string",
            "example" : "Polygon name"
          },
          "color" : {
            "type" : "string",
            "example" : "#FEFEFE"
          },
          "vertices" : {
            "type" : "array",
            "example" : [ {
              "longitude" : -37.812873,
              "latitude" : 144.977705
            }, {
              "longitude" : -37.810212,
              "latitude" : 144.98307
            } ],
            "items" : {
              "$ref" : "#/definitions/Point"
            }
          }
        }
      } ],
      "description" : "A geofence as an arbitrarily shaped polygon. It is recommended that these polygons have less than 300 vertices."
    },
    "BoundingBox" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Geofeature"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "boundingBox",
            "default" : "boundingBox"
          },
          "name" : {
            "type" : "string",
            "example" : "Bounding Box name"
          },
          "color" : {
            "type" : "string",
            "example" : "#FEFEFE"
          },
          "northEast" : {
            "$ref" : "#/definitions/Point"
          },
          "southWest" : {
            "$ref" : "#/definitions/Point"
          }
        }
      } ],
      "description" : "A geofence that contains the area between two latitude and two longitudes."
    },
    "Url" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Action"
      }, {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "example" : "https://bluedot.io"
          }
        }
      } ],
      "description" : "An additional action that opens a URL when a device triggers a zone."
    },
    "Message" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Action"
      }, {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "example" : "A default message title"
          },
          "message" : {
            "type" : "string",
            "example" : "A default message"
          }
        }
      } ],
      "description" : "An additional action that displays an in-app message when a device triggers a zone."
    },
    "Speed" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Condition"
      }, {
        "type" : "object",
        "properties" : {
          "minimumSpeed" : {
            "type" : "number",
            "example" : 0.0,
            "minimum" : 0
          },
          "maximumSpeed" : {
            "type" : "number",
            "example" : 5.0,
            "minimum" : 5
          }
        }
      } ],
      "description" : "A condition that a device is moving within specific speed(meters/second) range before the zone can trigger."
    },
    "TravelDirection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Condition"
      }, {
        "type" : "object",
        "properties" : {
          "fromAngle" : {
            "type" : "integer",
            "example" : 0,
            "minimum" : 0,
            "maximum" : 359
          },
          "toAngle" : {
            "type" : "integer",
            "example" : 10,
            "minimum" : 0,
            "maximum" : 359
          }
        }
      } ],
      "description" : "A condition that a device is moving in a specific direction (represented as clockwise angle from magnetic North) before the zone can trigger. From Angle and To Angle must be separated by at least 90 degrees in either direction."
    },
    "TravelPath" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Condition"
      }, {
        "type" : "object",
        "properties" : {
          "minimumGeofeaturesCrossed" : {
            "type" : "integer",
            "example" : 2,
            "minimum" : 2
          },
          "timeOutSeconds" : {
            "type" : "integer",
            "example" : 600,
            "minimum" : 60,
            "maximum" : 86400
          },
          "sequential" : {
            "type" : "boolean",
            "example" : true
          }
        }
      } ],
      "description" : "A condition that a device triggers two or more geofeatures before the zone can be triggered."
    },
    "TimeActive" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Condition"
      }, {
        "type" : "object",
        "properties" : {
          "fromTime" : {
            "type" : "string",
            "example" : "11:30:00",
            "pattern" : "^(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])$"
          },
          "toTime" : {
            "type" : "string",
            "example" : "21:30:00",
            "pattern" : "^(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])$"
          }
        }
      } ],
      "description" : "A condition that the local time on the device is within a certain range before the zone can be triggered."
    },
    "DayRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Condition"
      }, {
        "type" : "object",
        "properties" : {
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "example" : "2016-01-01"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "example" : "2017-12-30"
          }
        }
      } ],
      "description" : "A condition that the local date on the device is within a certain range before the zone can be triggered. Must have a startDate, endDate, or both."
    },
    "WebhookObject" : {
      "type" : "object",
      "required" : [ "type", "url" ],
      "properties" : {
        "url" : {
          "type" : "string",
          "example" : "https://google.com/webhookEndpoint",
          "pattern" : "^((http[s]?|ftp):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the trigger. Only support 'trigger' for now.",
          "enum" : [ "trigger" ]
        },
        "headers" : {
          "type" : "object",
          "example" : {
            "header" : "string"
          },
          "description" : "Custom header sent along with the webhook request.",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "A configuration object to specify details on how webhooks should be passed."
    },
    "Geofeature" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "discriminator" : "type",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "default name",
          "description" : "Name for geafeature being created."
        },
        "type" : {
          "type" : "string",
          "example" : "circle",
          "description" : "Type of geofeatures and must be one of these options: circle, geoline, beacon, polygon, boundingBox",
          "enum" : [ "circle", "geoline", "beacon", "polygon", "boundingBox" ]
        }
      },
      "description" : "A representation of a physical world trigger. Parent class of Circle, BoundingBox, Polygon, Geoline, and ZoneBeacon.",
      "example" : {
        "type" : "beacon",
        "name" : "create beacon",
        "proximityUUID" : "23a01af0-232a-4518-9c0e-323fb773f5ef",
        "location" : {
          "latitude" : -37.8159544565362,
          "longitude" : 144.9723565578461
        },
        "beaconType" : "both",
        "major" : 12321,
        "minor" : 56466,
        "txPower" : -77,
        "macAddress" : "01:17:c5:31:84:19"
      }
    },
    "GeofeatureResponse" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "example" : "280f5dab-df8d-4357-899f-5f718338be7b",
            "description" : "The identifier of the Geofeature."
          }
        }
      }, {
        "$ref" : "#/definitions/Geofeature"
      } ],
      "example" : {
        "_id" : "280f5dab-df8d-4357-899f-5f718338be7b",
        "type" : "beacon",
        "name" : "create beacon",
        "proximityUUID" : "23a01af0-232a-4518-9c0e-323fb773f5ef",
        "location" : {
          "latitude" : -37.8159544565362,
          "longitude" : 144.9723565578461
        },
        "beaconType" : "both",
        "major" : 12321,
        "minor" : 56466,
        "txPower" : -77,
        "macAddress" : "01:17:c5:31:84:19"
      }
    },
    "Action" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "message",
          "description" : "Type of an action and must be either message or url",
          "enum" : [ "message", "url" ]
        }
      },
      "description" : "An additional action. Parent class for Message and Url.",
      "example" : {
        "type" : "message",
        "title" : "a default title",
        "message" : "a default message"
      }
    },
    "Condition" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of a condition and must be one of these options: speed, travelDirection, travelPath, timeActive, and dayRange.",
          "enum" : [ "speed", "travelDirection", "travelPath", "timeActive", "dayRange" ]
        }
      },
      "description" : "A condition that must be met before the zone can be triggered. Parent class for Speed, TravelDirection, TravelPath, TimeActive, and DayRange.",
      "example" : {
        "type" : "speed",
        "minimumSpeed" : 0,
        "maximumSpeed" : 5
      }
    },
    "MinimumRetriggerTime" : {
      "type" : "integer",
      "minimum" : 60,
      "maximum" : 3599940,
      "description" : "The minimum time in seconds that must elapse after a zone has triggered before it is allowed to trigger again.",
      "example" : 600
    },
    "ZoneCluster" : {
      "type" : "object",
      "properties" : {
        "point" : {
          "type" : "string",
          "example" : "150.34565,-24.44556",
          "description" : "The location of the cluster."
        },
        "count" : {
          "type" : "number",
          "example" : 350.0,
          "description" : "The number of zones in a cluster"
        },
        "additionalCount" : {
          "type" : "boolean",
          "example" : true
        }
      },
      "description" : "A cluster of zones. Used for rendering areas with large numbers of zones on a map."
    },
    "ZonesCount" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "number",
          "example" : 400.0,
          "description" : "Number of zones in a Project"
        }
      },
      "description" : "Number of zones in a project"
    },
    "ProjectPermission" : {
      "type" : "object",
      "properties" : {
        "projectId" : {
          "type" : "string",
          "example" : "ec09f506-44c8-482d-92d0-4ee57d5c42b4",
          "description" : "The identifier of the project associated with an account."
        },
        "permissionLevel" : {
          "type" : "string",
          "enum" : [ "READ", "READ_WRITE" ]
        }
      },
      "description" : "A level of permission assigned to a user on a per-project basis."
    },
    "Project" : {
      "type" : "object",
      "required" : [ "name", "nextRuleUpdateInterval" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "A Sample Project",
          "description" : "Name of the project."
        },
        "nextRuleUpdateInterval" : {
          "type" : "integer",
          "example" : 600,
          "description" : "This is how frequently the Project tries to download the latest locations configured.",
          "minimum" : 300,
          "maximum" : 172800
        },
        "webhooks" : {
          "type" : "array",
          "description" : "Objects that specify details on how webhook should be passed.",
          "items" : {
            "$ref" : "#/definitions/WebhookObject"
          }
        },
        "firebaseApiKey" : {
          "type" : "string",
          "description" : "optional field if using firebase"
        }
      },
      "description" : "An object which can be connected with a mobile application. Contains a set of zones, and a configuration to reflect the behaviour desired from the application."
    },
    "ProjectResponse" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "example" : "ec09f506-44c8-482d-92d0-4ee57d5c42b4",
            "description" : "The identifier of the project."
          }
        }
      }, {
        "$ref" : "#/definitions/Project"
      } ]
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "firstName", "isAdmin", "lastName", "username" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "johnsmith@company.com",
          "description" : "Email address of the user"
        },
        "username" : {
          "type" : "string",
          "example" : "johnsmith@company.com",
          "description" : "Email address is also used as username."
        },
        "firstName" : {
          "type" : "string",
          "example" : "John",
          "description" : "First name of the user."
        },
        "lastName" : {
          "type" : "string",
          "example" : "Smith",
          "description" : "Last name of the user."
        },
        "phoneNumber" : {
          "type" : "string",
          "description" : "Phone number of the user."
        },
        "isAdmin" : {
          "type" : "boolean",
          "example" : true,
          "description" : "The user is an admin or not."
        },
        "accountId" : {
          "type" : "string",
          "example" : "fd53348f-8dfb-4213-b154-ec0b22a2f15f",
          "description" : "The identifier of the account that the user belongs to.",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'"
        },
        "projectPermissions" : {
          "type" : "array",
          "description" : " The level of permission provided to the user per project.",
          "items" : {
            "$ref" : "#/definitions/ProjectPermission"
          }
        }
      },
      "description" : "A user that may login to PointAccess or use the API."
    },
    "UserResponse" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "example" : "ec09f506-44c8-482d-92d0-4ee57d5c42b4",
            "description" : "The identifier of the user."
          }
        }
      }, {
        "$ref" : "#/definitions/User"
      } ]
    },
    "Zone" : {
      "type" : "object",
      "required" : [ "geofeatures", "minimumRetriggerTime", "name", "projectId" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Example zone name",
          "description" : "Name of the zone."
        },
        "minimumRetriggerTime" : {
          "$ref" : "#/definitions/MinimumRetriggerTime"
        },
        "triggerOnExit" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Trigger an event as the device is leaving the zone."
        },
        "geofeatures" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Geofeature"
          }
        },
        "customData" : {
          "$ref" : "#/definitions/CustomData"
        },
        "conditions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Condition"
          }
        },
        "tags" : {
          "type" : "array",
          "example" : [ "lines", "borders", "stripes" ],
          "items" : {
            "type" : "string",
            "description" : "custom tags"
          }
        },
        "actions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Action"
          }
        },
        "projectId" : {
          "type" : "string",
          "example" : "c7058934-f1e6-4176-8730-a0bd28e8e0a9",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'"
        }
      },
      "description" : "One or more geofeatures (geofences or beacons) that will trigger if a device interacts with a geofeature as specified while all conditions are met."
    },
    "ZoneResponse" : {
      "type" : "object",
      "required" : [ "geofeatures", "minimumRetriggerTime", "name", "projectId" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "example" : "ec09f506-44c8-482d-92d0-4ee57d5c42b4",
          "description" : "The identifier of the zone."
        },
        "name" : {
          "type" : "string",
          "example" : "Example zone name"
        },
        "minimumRetriggerTime" : {
          "$ref" : "#/definitions/MinimumRetriggerTime"
        },
        "triggerOnExit" : {
          "type" : "boolean",
          "example" : true
        },
        "geofeatures" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GeofeatureResponse"
          }
        },
        "customData" : {
          "$ref" : "#/definitions/CustomData"
        },
        "conditions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Condition"
          }
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "actions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Action"
          }
        },
        "projectId" : {
          "type" : "string",
          "example" : "c7058934-f1e6-4176-8730-a0bd28e8e0a9",
          "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'"
        }
      },
      "description" : "One or more geofeatures (geofences or beacons) that will trigger if a device interacts with a geofeature as specified while all conditions are met."
    },
    "Credentials" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "swagger@bluedot.io",
          "description" : "Email address of the account to login"
        },
        "password" : {
          "type" : "string",
          "example" : "password123",
          "description" : "Password of the account to login"
        }
      }
    },
    "AuthenticationTokens" : {
      "type" : "object",
      "properties" : {
        "idToken" : {
          "type" : "string",
          "description" : "The ID Token is a JSON Web Token (JWT) that contains user profile information (such as the user's name and email)."
        },
        "accessToken" : {
          "type" : "string",
          "description" : "An Access Token is a credential that can be used by an application to access an API."
        },
        "refreshToken" : {
          "type" : "string",
          "description" : "a special token that can be used to obtain a renewed access token."
        }
      }
    },
    "AuthenticationRefreshTokens" : {
      "type" : "object",
      "properties" : {
        "idToken" : {
          "type" : "string",
          "example" : "eyJraWQiOiJ2VnV5OXhIT00zeVBPeEwwTDFrTmN1aXBFS3Jwd0l0ekhrQ0VKUnpOOXU4PSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJlNzc1MTFjNi1hNTQ3LTQxNTgtYmY4ZC0xNzk3Mzg5ZmQ3ZmIiLCJhdWQiOiIzajJldjB1bjZnbnY4NGczM25zZGRoMmJqdSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjAxNWZiMmY5LThhMjItMTFlOC1iMTJkLTc5NDZhZDYxZmM2MyIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNTMxODczOTI5LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTIuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTJfOFZLZVBhRUxlIiwibmlja25hbWUiOiIyM2EwMWFmMC0yMzJhLTQ1MTgtOWMwZS0zMjNmYjc3M2Y1ZWYiLCJjb2duaXRvOnVzZXJuYW1lIjoicnlhbkBibHVlZG90LmlvIiwiZXhwIjoxNTMxODc3NTI5LCJpYXQiOjE1MzE4NzM5MjksImVtYWlsIjoicnlhbkBibHVlZG90LmlvIn0.QQodxfgLyfvXoTDFrLEEu7cmUv1p-NLmV1--R8QfkKsSJ2LreJPBmmvhjEf5pYFFVTSuBfDITGxxKQrVbTLrLeWWFsWXxyRWBleNSVwwywGJPaS3Ra26EHjicwMHDY3Ln8B8eJ18oTcj_ZmAf_5z8OXhGxfGngdUxzbRN646OY-0Pki45HQ8e50uKGIHj_RRhWyyRxf27SvFEHAjbUA7QfcbGs1HA1b6oOc7VTCR6Qm8MgYw6jTbwl-8HrIrVicvwPwawmsP59tOsOa-9suBBGw7p2L9cmkBJGEKnhjiM57TXzGFmLKR7-HpxInkITfAry2N_UmzkemL_axbNE38zg",
          "description" : "The ID Token is a JSON Web Token (JWT) that contains user profile information (such as the user's name and email)."
        },
        "accessToken" : {
          "type" : "string",
          "example" : "eyJraWQiOiI2T09XbTZDNXRhQmNWbXJ5ZCtFSVZXR1VsT29SN1Jub1NmaXBDVXp0SzZRPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJlNzc1MTFjNi1hNTQ3LTQxNTgtYmY4ZC0xNzk3Mzg5ZmQ3ZmIiLCJldmVudF9pZCI6IjAxNWZiMmY5LThhMjItMTFlOC1iMTJkLTc5NDZhZDYxZmM2MyIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE1MzE4NzM5MjksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMi5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMl84VktlUGFFTGUiLCJleHAiOjE1MzE4Nzc1MjksImlhdCI6MTUzMTg3MzkyOSwianRpIjoiZTgxZGEzMjUtOTU3Yi00NTUwLWFhYjktMjE0NTlmYzMxZTc1IiwiY2xpZW50X2lkIjoiM2oyZXYwdW42Z252ODRnMzNuc2RkaDJianUiLCJ1c2VybmFtZSI6InJ5YW5AYmx1ZWRvdC5pbyJ9.kpdSUqyCZ8VkGtSkgYF7XFGOLSsKCtQ9auK4iQaH90FoOZFK16DmRsZWUMcLDZ64txjjF9_qTGY5I8hAFGsU3GFirnkhWjPGzLvixoMqOFF4enu2MA4Z0LmEItLZyYgSaJIn5HXH57aNCKaeU3QnM7PJVg5NHBTO6MorghPA17_fPbiT96as8-5JQk7V7JoMIAOKYrl8cMDvajrfN3v_Da1N6lKqAi09biKJBMo7j2I7ac8eFxJ1P69FXcWT-FkUTb64BVaIOs2FJEt-7WTFS_OJyuJ1GYv508CzODA62BOvz6uJNJHfvinqy5BIeImsKqpIe-5sux-14p-dRm9dRw",
          "description" : "An Access Token is a credential that can be used by an application to access an API."
        },
        "expiresIn" : {
          "type" : "number",
          "example" : 3600.0,
          "description" : "The expiration period of the access token in seconds."
        },
        "tokenType" : {
          "type" : "string",
          "example" : "Bearer",
          "description" : "The token type (i.e Bearer)."
        }
      }
    },
    "RefreshToken" : {
      "type" : "object",
      "properties" : {
        "refreshToken" : {
          "type" : "string",
          "description" : "a special token that can be used to obtain a renewed access token."
        }
      }
    },
    "Email" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "jsmith@bluedot.io",
          "description" : "Email address of account to be reset"
        }
      }
    },
    "PasswordReset" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "jsmith@bluedot.io",
          "description" : "Email address of account to be reset"
        },
        "password" : {
          "type" : "string",
          "example" : "password123",
          "description" : "New password to be reset. Note: Password length of at least 6 characters, as well as requiring numbers, special characters, uppercase and lowercase letters."
        },
        "verificationCode" : {
          "type" : "string",
          "example" : "749307",
          "description" : "generated code sent via email"
        }
      }
    },
    "PasswordNew" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "jsmith@bluedot.io",
          "description" : "Email address of account to be reset"
        },
        "temporaryPassword" : {
          "type" : "string",
          "example" : "123456",
          "description" : "generated code sent via email"
        },
        "newPassword" : {
          "type" : "string",
          "example" : "password123",
          "description" : "New password to be reset. Note: Password length of at least 6 characters, as well as requiring numbers, special characters, uppercase and lowercase letters."
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Bluedot Innovation",
    "url" : "https://bluedot.io"
  },
  "x-amazon-apigateway-request-validators" : {
    "full" : {
      "validateRequestBody" : true,
      "validateRequestsParameter" : true
    },
    "body-only" : {
      "validateRequestBody" : true,
      "validateRequestsParameter" : false
    }
  },
  "x-amazon-apigateway-request-validator" : "NONE",
  "x-amazon-apigateway-gateway-responses" : {
    "DEFAULT_4XX" : {
      "responseTemplates" : {
        "application/json" : "{\"message\": \"Unfortunately, something went wrong. You can try again, or contact support if this keeps happening.\"}"
      }
    }
  },
  "x-suppress" : [ {
    "$ref" : "#/definitions/Circle"
  }, {
    "$ref" : "#/definitions/Beacon"
  }, {
    "$ref" : "#/definitions/Beacon"
  }, {
    "$ref" : "#/definitions/Geoline"
  }, {
    "$ref" : "#/definitions/Polygon"
  }, {
    "$ref" : "#/definitions/BoundingBox"
  }, {
    "$ref" : "#/definitions/Url"
  }, {
    "$ref" : "#/definitions/Message"
  }, {
    "$ref" : "#/definitions/Speed"
  }, {
    "$ref" : "#/definitions/TravelDirection"
  }, {
    "$ref" : "#/definitions/DayRange"
  }, {
    "$ref" : "#/definitions/TimeActive"
  }, {
    "$ref" : "#/definitions/TravelPath"
  } ]
}