swagger: '2.0'
info:
  description: |
    Bluedot Innovation Configuration API
    [https://bluedot.io](https://bluedot.io)
    Authentication: Use the sessions endpoint to obtain an accessToken, and then supply it in the Authorization header for subsequent requests
  version: "1.1.40"
  title: Bluedot Innovation Configuration API
  termsOfService: https://bluedot.io/terms/
  contact:
    email: help@bluedot.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: "https://raw.githubusercontent.com/Bluedot-Innovation/Config-API-Swagger/master/images/img-logo-be.png"
    backgroundColor: "#FFFFFF"
    altText: "Bluedot logo"
host: config.bluedot.io
basePath: /prod1
tags:
  - name: sessions
    description: Session management
    externalDocs:
      description: Find out more
      url: 'https://bluedot.io'
  - name: users
    description: Operations about Users
    externalDocs:
      description: Find out more
      url: 'https://bluedot.io'
  - name: projects
    description: Operations about Projects
    externalDocs:
      description: Find out more
      url: 'https://bluedot.io'
  - name: zones
    description: Operations about Zones
    externalDocs:
      description: Find out more
      url: 'https://bluedot.io'
  - name: beacons
    description: Operations about Beacons
    externalDocs:
      description: Find out more
      url: 'https://bluedot.io'
  - name: tags
    description: Operations about Tags
    externalDocs:
      description: Find out more
      url: 'https://bluedot.io'
  - name: credentials
    description: Operations about Credentials
    externalDocs:
      description: Find out more
      url: 'https://bluedot.io'
schemes:
 - https

x-amazon-apigateway-request-validators:
  full:
    validateRequestBody: true
    validateRequestsParameter: true
  body-only:
    validateRequestBody: true
    validateRequestsParameter: false
x-amazon-apigateway-request-validator: NONE

x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseTemplates:
      application/json: '{"message": "Unfortunately, something went wrong. You can try again, or contact support if this keeps happening."}'

paths:

  #password management
  /password/token-request:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - credentials
      operationId: optionPasswordResetRequest
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
    post:
      tags:
      - credentials
      summary: Triggers a password reset token
      operationId: createTokenRequest
      consumes:
      - application/json
      parameters:
        - in: body
          name: body
          description: Email address of account to be reset
          required: true
          schema:
            $ref: '#/definitions/Email'
      responses:
        204:
          description: Password reset token successfully generated
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: some error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Invalid user
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Invalid user
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: "##AUTHENTICATOR_URI"
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{"fun": "generatePasswordToken", "httpMethod": "$context.httpMethod",
            "body": $input.json(''$'')}'
        responses:
          default:
            statusCode: '204'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"

    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'
  /password/token:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - credentials
      operationId: optionPasswordReset
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
    post:
      tags:
      - credentials
      summary: Uses password reset token to change password
      operationId: resetPassword
      consumes:
      - application/json
      parameters:
        - in: body
          name: body
          description: credentials of account to be reset
          required: true
          schema:
            $ref: '#/definitions/PasswordReset'
      responses:
        201:
          description: Password successfully reset
          schema:
            $ref: '#/definitions/AuthenticationTokens'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad Request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Not Found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: "##AUTHENTICATOR_URI"
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{"fun": "resetPassword", "httpMethod": "$context.httpMethod",
            "body": $input.json(''$'')}'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"

    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'

  /password/new:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - credentials
      operationId: optionPasswordNew
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
    post:
      tags:
      - credentials
      summary: Uses the temporary password to change a newly created user's password
      operationId: createNewPassword
      consumes:
      - application/json
      parameters:
        - in: body
          name: body
          description: credentials of account to be reset
          required: true
          schema:
            $ref: '#/definitions/PasswordNew'
      responses:
        201:
          description: Password successfully reset
          schema:
            $ref: '#/definitions/AuthenticationTokens'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad Request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Not Found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: "##AUTHENTICATOR_URI"
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{"fun": "setNewUserPassword", "httpMethod": "$context.httpMethod",
            "body": $input.json(''$'')}'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"

    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'
  # Tags
  /tags:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionTags
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - tags
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH,POST,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    get:
      tags:
        - tags
      summary: Gets a list of all tags being used on zones by projectId
      description: Returns tags by projectId
      operationId: getTags
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: query
          description: Project to search for tags in
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              type: string
            example: ['lines', 'borders', 'stripes']
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.TagLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "searchTags",
            "token":"$input.params(''Authorization'')",
            "projectId": "$input.params(''projectId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'

  #Session Management
  /sessions:
    post:
      tags:
      - sessions
      summary: Authenticates a user
      operationId: createSession
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        201:
          description: User authenticated
          schema:
            $ref: '#/definitions/AuthenticationTokens'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Invalid user
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: "##AUTHENTICATOR_URI"
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
            application/json: '{"fun": "login", "httpMethod": "$context.httpMethod",
            "body": $input.json(''$'')}'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    delete:
      tags:
      - sessions
      summary: Logs a user out
      produces:
      - application/json
      operationId: deleteSession
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
      responses:
        200:
          description: User logged out
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Invalid user
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: "##AUTHENTICATOR_URI"
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{"fun": "logout", "httpMethod": "$context.httpMethod",
            "headers": { #foreach($param in $input.params().header.keySet()) "$param":
            "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
            #end }}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    put:
      summary: Refreshes a session
      operationId:  refreshSession
      tags:
      - sessions
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - in: body
          name: refreshToken
          description: a special token that can be used to obtain a renewed access token.
          required: true
          schema:
            $ref: '#/definitions/RefreshToken'
      responses:
        201:
          description: Session refreshed
          schema:
            $ref: '#/definitions/AuthenticationRefreshTokens'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: "##AUTHENTICATOR_URI"
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{"fun": "refresh", "httpMethod": "$context.httpMethod",
            "body": $input.json(''$''), "headers": { #foreach($param in $input.params().header.keySet())
            "$param": "$util.escapeJavaScript($input.params().header.get($param))"
            #if($foreach.hasNext),#end #end }}'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - sessions
      operationId: optionSession
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST, PUT, DELETE,
                GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'
  # Users
  /users:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionUsers
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    post:
      tags:
      - users
      summary: Adds a user
      operationId: addUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - in: body
          name: body
          description: User object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User created
          schema:
            $ref: '#/definitions/UserResponse'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: User not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-request-validator: NONE
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "postUser",
            "token": "$input.params(''Authorization'')",
            "httpMethod": "$context.httpMethod",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    get:
      tags:
      - users
      summary: Gets all users
      operationId: searchUsers
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: User not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "searchUsers",
            "token": "$input.params(''Authorization'')",
            "accountId": "$input.params(''accountId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'
  /users/{userId}:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: userId
          in: path
          description: The identoifier of the user.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        - in: body
          name: body
          description: User that needs to be added
          required: true
          schema:
            $ref: '#/definitions/User'
      tags:
      - users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Not Found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        passthroughBehavior: never
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    put:
      tags:
      - users
      summary: Updates a complete user
      operationId: replaceUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: userId
          in: path
          description: The identifier of the user being updated.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        - in: body
          name: body
          description: User that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User updated
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Invalid input
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: User not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "putUser",
            "token": "$input.params(''Authorization'')",
            "userId": "$input.params(''userId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    get:
      tags:
        - users
      summary: Finds user by userId
      description: Returns a single user
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: userId
          in: path
          description: The identifier of the user to return.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/User"
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: User not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "getUser",
            "token": "$input.params(''Authorization'')",
            "userId": "$input.params(''userId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    delete:
      tags:
        - users
      summary: Deletes a user
      operationId: deleteUser
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: userId
          in: path
          description: The identifier of user to be deleted.
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
      responses:
        200:
          description: User deleted
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: User not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "deleteUser",
            "token": "$input.params(''Authorization'')",
            "httpMethod": "$context.httpMethod",
            "userId": "$input.params(''userId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    patch:
      tags:
        - users
      summary: Updates a user
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: userId
          in: path
          description: The identifier of user to be patched.
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        - name: JsonPatch
          in: body
          required: true
          schema:
            $ref: "#/definitions/PatchRequest"
      responses:
        200:
          description: User patched
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        204:
          description: User patched
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: User not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        '415':
          # Todo - To be sent with an Accept-Patch header
          description: Unsupported Media
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.UserLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "patchUser",
            "token": "$input.params(''Authorization'')",
            "userId": "$input.params(''userId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
  # Project
  /projects:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionProjects
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - projects
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST, PUT, DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    post:
      tags:
      - projects
      summary: Adds a project
      operationId: addProject
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - in: body
          name: body
          description: Project object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        201:
          description: Project created
          schema:
            $ref: '#/definitions/ProjectResponse'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Project not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-request-validator: NONE
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "postProject",
            "token": "$input.params(''Authorization'')",
            "httpMethod": "$context.httpMethod",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    get:
      tags:
      - projects
      summary: Gets all projects by accountId
      operationId: getProjects
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - in: query
          name: accountId
          description: only required for administrative context switching
          required: false
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectResponse'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Project not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "searchProjects",
            "token": "$input.params(''Authorization'')",
            "accountId": "$input.params(''accountId'')",
            "tags": "$input.params(''tags'')",
            "textSearchTerm": "$input.params(''textSearchTerm'')",
            "limit": "$input.params(''limit'')",
            "offset": "$input.params(''offset'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'
  /projects/{projectId}:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionProject
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - projects
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: path
          description: The identifier of the project.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    put:
      tags:
      - projects
      summary: Updates a complete project
      operationId: replaceProject
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: path
          description: The identifier of the project being updated.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        - in: body
          name: body
          description: Project obtject that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        200:
          description: Project updated
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Invalid input
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Project not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "putProject",
            "token": "$input.params(''Authorization'')",
            "projectId": "$input.params(''projectId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    get:
      tags:
        - projects
      summary: Finds project by ID
      description: Returns a single project
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: path
          description: The identifier of the project being returned.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/ProjectResponse"
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Project not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "getProject",
            "token": "$input.params(''Authorization'')",
            "projectId": "$input.params(''projectId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    delete:
      tags:
        - projects
      summary: Deletes a project
      operationId: deleteProject
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: path
          description: The identifier of the project being deleted.
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
      responses:
        '200':
          description: Zone deleted
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Project not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "deleteProject",
            "token": "$input.params(''Authorization'')",
            "httpMethod": "$context.httpMethod",
            "projectId": "$input.params(''projectId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    patch:
      tags:
        - projects
      summary: Updates an project
      operationId: updateProject
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: path
          description: The identifier of the project being patched.
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        - name: JsonPatch
          in: body
          required: true
          schema:
            $ref: "#/definitions/PatchRequest"
      responses:
        200:
          description: Project patched
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Project not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        '415':
          # Todo - To be sent with an Accept-Patch header
          description: Unsupported Media
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.ProjectLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "patchProject",
            "token": "$input.params(''Authorization'')",
            "projectId": "$input.params(''projectId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"

  # Zones
  /zones:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionZones
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - zones
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken,Access-Control-Request-Method, Access-Control-Request-Headers'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    post:
      tags:
      - zones
      summary: Adds a zone to the project
      operationId: addZone
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - in: body
          name: body
          description: Zone object that needs to be added to the application
          required: true
          schema:
            $ref: '#/definitions/Zone'
      responses:
        201:
          description: Zone created
          schema:
            $ref: '#/definitions/ZoneResponse'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-request-validator: NONE
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "postZone",
            "token": "$input.params(''Authorization'')",
            "httpMethod": "$context.httpMethod",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    get:
      tags:
        - zones
      summary: Gets all zones by project Id
      description: Returns zones by query / default offset=0 / default limit=100
      operationId: getZones
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: query
          description: The identifier of the project.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        - name: tags
          in: query
          description: tags / comma-separated list
          type: string
          required: false
        - name: textSearchTerm
          description: Fuzzy search / comma-separate list / currently searches name & description
          in: query
          type: string
          required: false
        - name: limit
          in: query
          description: How many results to return
          type: integer
          required: false
        - name: offset
          in: query
          description: How many results to offset
          type: integer
          required: false
        - name: northeast
          in: query
          description: northeast coordinates (long,lat)
          type: string
          required: false
          pattern: >-
            ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
        - name: southwest
          description: southwest coordinates (long,lat)
          in: query
          type: string
          pattern: >-
            ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
          required: false
        - name: paginationToken
          in: header
          description: Pagination token as returned by the server
          type: string
          required: false
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/ZoneResponse"
          headers:
            Access-Control-Expose-Headers:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
            x-bluedot-paginationToken:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "searchZones",
            "token":"$input.params(''Authorization'')",
            "projectId": "$input.params(''projectId'')",
            "tags": "$input.params(''tags'')",
            "textSearchTerm": "$input.params(''textSearchTerm'')",
            "limit": "$input.params(''limit'')",
            "offset": "$input.params(''offset'')",
            "paginationToken": "$input.params(''x-bluedot-paginationToken'')",
            "northeast": "$input.params(''northeast'')",
            "southwest": "$input.params(''southwest'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-bluedot-paginationToken'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken,Access-Control-Request-Method, Access-Control-Request-Headers'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.x-bluedot-paginationToken: "integration.response.body.headers.x-bluedot-paginationToken"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'
  /zones/{zoneId}:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - zones
      operationId: optionZone
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: zoneId
          in: path
          description: The identifier of the zone.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
    put:
      tags:
        - zones
      summary: Replaces a zone
      description: Returns a single zone
      operationId: replaceZone
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: zoneId
          in: path
          description: The identifier of the zone being updated.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        - in: body
          name: body
          description: Zone object that needs to be added to the application
          required: true
          schema:
            $ref: '#/definitions/ZoneResponse'
      security:
        - publicapi-custom-authorizer: []
      responses:
        200:
          description: Zone updated
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone does not exist
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "putZone",
            "token": "$input.params(''Authorization'')",
            "zoneId": "$input.params(''zoneId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    get:
      tags:
        - zones
      summary: Finds a zone by zoneId
      description: Returns a single zone
      operationId: getZoneById
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: zoneId
          in: path
          description: The identifier of the zone to return.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/ZoneResponse"
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "getZone",
            "token": "$input.params(''Authorization'')",
            "zoneId": "$input.params(''zoneId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    delete:
      tags:
      - zones
      summary: Deletes a zone
      operationId: deleteZone
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: zoneId
          in: path
          description: Zone id to delete
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
      security:
        - publicapi-custom-authorizer: []
      responses:
        200:
          description: Zone deleted
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "deleteZone",
            "token": "$input.params(''Authorization'')",
            "httpMethod": "$context.httpMethod",
            "zoneId": "$input.params(''zoneId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    patch:
      tags:
        - zones
      summary: Updates a zone
      operationId: updateZone
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: zoneId
          in: path
          description: zoneId
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        - name: JsonPatch
          in: body
          required: true
          schema:
            $ref: "#/definitions/PatchRequest"
      security:
        - publicapi-custom-authorizer: []
      responses:
        200:
          description: Zone patched
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        '415':
          # Todo - To be sent with an Accept-Patch header
          description: Unsupported Media
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "patchZone",
            "token": "$input.params(''Authorization'')",
            "zoneId": "$input.params(''zoneId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
  /zones/clusters:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionZoneClusters
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - zones
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    get:
      tags:
        - zones
      summary: Gets zone clusters by project Id
      description: Returns an array of zoneClusters
      operationId: getZoneClusters
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: query
          description: The identifier of the project being searched.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        - name: northeast
          in: query
          description: northeast coordinates (long,lat)
          type: string
          required: true
          pattern: >-
            ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
        - name: southwest
          description: southwest coordinates (long,lat)
          in: query
          type: string
          pattern: >-
            ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
          required: true
        - name: tags
          in: query
          description: tags / comma-separated list
          type: string
          required: false
        - name: textSearchTerm
          description: Fuzzy search / comma-separate list / currently searches name & description
          in: query
          type: string
          required: false
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ZoneCluster'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "getZoneClusters",
            "token":"$input.params(''Authorization'')",
            "projectId": "$input.params(''projectId'')",
            "tags": "$input.params(''tags'')",
            "textSearchTerm": "$input.params(''textSearchTerm'')",
            "northeast": "$input.params(''northeast'')",
            "southwest": "$input.params(''southwest'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
  /zones/count:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionZonesCount
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - zones
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-bluedot-paginationToken'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    get:
      tags:
        - zones
      summary: Gets zones count per project Id
      description: Returns a number with the number of zones
      operationId: getZonesCount
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: projectId
          in: query
          description: The identifier of the project being searched.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        - name: tags
          in: query
          description: tags / comma-separated list
          type: string
          required: false
        - name: textSearchTerm
          description: Fuzzy search / comma-separate list / currently searches name & description
          in: query
          type: string
          required: false
        - name: northeast
          in: query
          description: northeast coordinates (long,lat)
          type: string
          required: false
          pattern: >-
            ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
        - name: southwest
          description: southwest coordinates (long,lat)
          in: query
          type: string
          pattern: >-
            ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
          required: false
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ZonesCount'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Zone not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.LambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "getZonesCount",
            "token":"$input.params(''Authorization'')",
            "projectId": "$input.params(''projectId'')",
            "tags": "$input.params(''tags'')",
            "textSearchTerm": "$input.params(''textSearchTerm'')",
            "northeast": "$input.params(''northeast'')",
            "southwest": "$input.params(''southwest'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
  # Beacon
  /beacons:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionBeacons
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - beacons
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    post:
      tags:
      - beacons
      summary: Adds a beacon
      operationId: addBeacon
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - in: body
          name: body
          description: Beacon object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Beacon'
      responses:
        201:
          description: Beacon created
          schema:
            $ref: '#/definitions/BeaconResponse'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Beacon not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        409:
          description: Beacon already exists
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-request-validator: NONE
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "postBeacon",
            "httpMethod": "$context.httpMethod",
            "token": "$input.params(''Authorization'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    get:
      tags:
      - beacons
      summary: Gets all beacons by account
      operationId: getBeacons
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - in: query
          name: accountId
          description: only required for administrative context switching
          required: false
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/BeaconResponse'
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Beacon not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      security:
        - publicapi-custom-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "getBeacons",
            "accountId": "$input.params(''accountId'')",
            "token":"$input.params(''Authorization'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      responses:
        '405':
          description: 405 response
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode" : 405}'
        passthroughBehavior: when_no_match
        type: mock
        responses:
          default:
            statusCode: '405'
            responseTemplates:
              application/json: '{"message": "Method $context.httpMethod is not allowed for this endpoint."}'
  /beacons/{beaconId}:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      operationId: optionBeacon
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: beaconId
          in: path
          description: The identifier of the beacon.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - beacons
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
    get:
      tags:
        - beacons
      summary: Finds a beacon by beaconId
      description: Returns a single beacon
      operationId: getBeaconById
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: beaconId
          in: path
          description: The identifier of the beacon to return.
          required: true
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/BeaconResponse"
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Beacon not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "getBeacon",
            "token":"$input.params(''Authorization'')",
            "beaconId": "$input.params(''beaconId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    delete:
      tags:
        - beacons
      summary: Deletes a beacon
      operationId: deleteBeacon
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: beaconId
          in: path
          description: beaconId
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
      security:
        - publicapi-custom-authorizer: []
      responses:
        200:
          description: Beacon deleted
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Beacon not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "deleteBeacon",
            "token":"$input.params(''Authorization'')",
            "httpMethod": "$context.httpMethod",
            "beaconId": "$input.params(''beaconId'')"
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    put:
      tags:
      - beacons
      summary: Updates a complete beacon
      operationId: replaceBeacon
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: beaconId
          in: path
          description: beaconId
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        - in: body
          name: body
          description: Beacon object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Beacon'
      security:
        - publicapi-custom-authorizer: []
      responses:
        200:
          description: Beacon updated
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Beacon not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "putBeacon",
            "token":"$input.params(''Authorization'')",
            "beaconId": "$input.params(''beaconId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
    patch:
      tags:
        - beacons
      summary: Updates a beacon
      operationId: updateBeacon
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: 'Bearer Token. Format: `Bearer <accessToken>`'
          required: true
          type: string
        - name: beaconId
          in: path
          description: beaconId
          required: true
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        - name: JsonPatch
          in: body
          required: true
          schema:
            $ref: "#/definitions/PatchRequest"
      security:
        - publicapi-custom-authorizer: []
      responses:
        200:
          description: Beacon patched
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        403:
          description: Forbidden
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        404:
          description: Beacon not found
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        429:
          description: Resource Exceeded
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
        '415':
          # Todo - To be sent with an Accept-Patch header
          description: Unsupported Media

      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:##AWS_REGION##:##AWS_ACCOUNT_NUMBER##:function:${stageVariables.BeaconLambdaFunctionName}/invocations
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: '{
            "fun": "patchBeacon",
            "token":"$input.params(''Authorization'')",
            "beaconId": "$input.params(''beaconId'')",
            "body": $input.json(''$'')
          }'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.body')"
          ".*ValidationError.*":
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*PermissionError.*":
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*NotFoundError.*":
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ResourceExceededError.*":
            statusCode: '429'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          ".*ServerError.*":
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
securityDefinitions:
  publicapi-custom-authorizer:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: custom
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri: "##CUSTOMAUTHORIZER_URI"
      authorizerCredentials: arn:aws:iam::##AWS_ACCOUNT_NUMBER##:role/CONFIGURATION_API_apig_lambda_proxy
      authorizerResultTtlInSeconds: 0

x-suppress:
  # workaround to surpress unnecessary warning
  # https://github.com/swagger-api/swagger-editor/issues/765
  - $ref: '#/definitions/Circle'
  - $ref: '#/definitions/Beacon'
  - $ref: '#/definitions/Beacon'
  - $ref: '#/definitions/Geoline'
  - $ref: '#/definitions/Polygon'
  - $ref: '#/definitions/BoundingBox'
  - $ref: '#/definitions/Url'
  - $ref: '#/definitions/Message'
  - $ref: '#/definitions/Speed'
  - $ref: '#/definitions/TravelDirection'
  - $ref: '#/definitions/DayRange'
  - $ref: '#/definitions/TimeActive'
  - $ref: '#/definitions/TravelPath'
definitions:
  ### schema level 3

  # patch document
  # https://tools.ietf.org/html/rfc6902
  PatchRequest:
    type: array
    description: An array of JSONPatch documents as defined by RFC 6902.
    items:
      $ref: "#/definitions/PatchDocument"
  PatchDocument:
    type: object
    description: A JSONPatch document as defined by RFC 6902.
    required:
     - "op"
     - "path"
    properties:
      op:
        type: string
        description: The operation to be performed. Only the `add`, `replace` and `remove` operations are supported at the moment.
        enum:
         - "add"
         - "remove"
         - "replace"
      path:
        type: string
        description: A JSON-Pointer
      value:
        description: Can be any value - string, number, boolean, array or object.
        example: Can be any value - string, number, boolean, array or object.
  CustomData:
    description: A set of user-defined key-value pairs that will be passed to mobile and webhook callbacks upon trigger.
    type: object
    additionalProperties:
      type: string
    example:
      {
        additionalProp1: string,
        additionalProp2: string,
        additionalProp3: string
      }
  # polygons
  Point:
    description: A point is an object that stores spatial geographic information (i.e longitude, latitude)
    type: object
    required:
      - longitude
      - latitude
    properties:
      longitude:
        type: number
        minimum: -180
        maximum: 180
        example: 144.9777056
      latitude:
        type: number
        minimum: -90
        maximum: 90
        example: -37.8128737
  Circle:
    description: A circular geofence.
    allOf:
    - $ref: '#/definitions/Geofeature'
    - type: object
      properties:
        type:
          type: string
          example: 'circle'
          default: 'circle'
        name:
          type: string
          description: Name given to the fence.
          example: 'circle name'
        color:
          type: string
          description: Hash code representing the color of the Geofence. For example, “#FFFFFF” is white.
          example: '#FEFEFE'
        radius:
          type: number
          description: Double value representing the radius of a circular geofence in metres.
          minimum: 5
          example: 10
        center:
          $ref: '#/definitions/Point'
    required:
      - radius
      - center
  Beacon:
    description: A Bluetooth beacon that can be used across multiple zones.
    allOf:
      - type: object
        properties:
          name:
            type: string
            description: A distinct name for the Beacon being created.
            example: 'beacon name'
          description:
            type: string
            description: This optional field can be used to store any additional information such as the descriptive location of the Beacon.
            example: 'beacon description'
          major:
            type: integer
            description: Required if the beaconType is either IOS or Both. The major value is an integer that can range from 0 to 65535; it identifies a grouping of iBeacons within a proximityUUID. For example; a Sanfransico location can be assigned 1 and a Melbourne location can be assigned 2.
            minimum: 0
            maximum: 65535
            example: 20
          minor:
            type: integer
            description: Required if the beaconType is either IOS or Both. The minor value is an integer that can range from 0 to 65535; it identifies a specific iBeacon within a proximityUUID and major value. For example; an iBeacon in a Sanfrancisco location can have 1 for major value and 25 as a minor value.
            minimum: 0
            maximum: 65535
            example: 10
          macAddress:
            type: string
            description: Required if the beaconType is either Android or Both. This is the hardware address of the Bluetooth Beacon. The MAC address can be obtained from the manufacturer of a Beacon or using the configuration app provided by the manufacturer. An example of Mac Address is ’00-15-E9-2B-99-3C’.
            example: '00-14-22-01-23-45'
          txPower:
            type: integer
            description: Required if the beaconType is either Android or Both. The Tx Power (transmit power) is a configuration setting common to all Bluetooth Beacons. This is set by the Beacon manufacturer and may be shown in the documentation or be configurable with a supplied tool. The range of Tx Power is -100 to 0.
            minimum: -100
            maximum: 0
            example: -10
          proximityUUID:
            type: string
            description: Required if the beaconType is either IOS or Both. A value that encapsulates a group of iBeacons. ProximityUUID is specific to the Apple iBeacon standard and the Bluedot Point SDK for Android does not use this to identify or trigger a Beacon. It is recommended to have the same proximityUUID for all iBeacons deployed within a given organization and use major and minor values to identify a specific Beacon. An example of a proximityUUID is “de305d54-75b4-431b-adb2-eb6b9e546014”. A proximityUUID is required to create an iBeacon in Bluedot Systems.
                         The proximityUUID can be obtained from the manufacturer of an iBeacon or using a configuration app provided by the manufacturer.
            example: 'de305d54-75b4-431b-adb2-eb6b9e546014'
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
          beaconType:
            type: string
            description: The target mobile platform for the Beacon
            enum:
              - IOS
              - Android
              - Both
            example: 'IOS'
          location:
            $ref: '#/definitions/Point'
          accountId:
            type: string
            description: The identifier of the account.
            example: '11111111-75b4-431b-adb2-eb6b9e546014'
    required:
      - longitude
      - latitude
      - name
      - beaconType

  BeaconResponse:
    description: Beacon response
    allOf:
      - type: object
        properties:
          _id:
            type: string
            description: The identifier of the beacon.
            example: ec09f506-44c8-482d-92d0-4ee57d5c42b4
      - $ref: '#/definitions/Beacon'
  ZoneBeacon:
    description: A Bluetooth beacon that is being added to a zone. This can be an existing beacon created previously using the /beacons or /zones endpoints, or a new beacon.
    allOf:
      - $ref: '#/definitions/Beacon'
      - type: object
        properties:
          proximity:
            type: string
            description: |
              Proximity represents the approximate distance at which the Beacon will trigger:
              * Immediate: The Beacon has to be almost touching or within an inch for the trigger to occur.
              * Near: The Beacon can be up to approximately 6 feet away from a device for the trigger to occur.
              * Far: The Beacon is farther than 6 feet away but still within receiving distance of the maximum range of the Beacon’s signal for the trigger to occur.
            enum:
              - Immediate
              - Near
              - Far
            example: 'Near'
  Geoline:
    type: object
    required:
      - type
      - name
      - vertices
    description: A virtual tripwire in the physical world that will cause a callback to be fired if a device crosses over it.
    allOf:
    - $ref: '#/definitions/Geofeature'
    - type: object
      properties:
        type:
          type: string
          example: 'geoline'
          default: 'geoline'
        name:
          type: string
          example: 'Geoline name'
        vertices:
          type: array
          description: A Geoline is made of two or more points. In the JSON, vertices is an array of 2 or more points, each having a latitude and longitude
          items:
            $ref: '#/definitions/Point'
          example: [{longitude: -37.812873, latitude: 144.977705}, {longitude: -37.810212, latitude: 144.983070}]
  Polygon:
    type: object
    required:
      - type
      - name
      - vertices
    description: A geofence as an arbitrarily shaped polygon. It is recommended that these polygons have less than 300 vertices.
    allOf:
    - $ref: '#/definitions/Geofeature'
    - type: object
      properties:
        type:
          type: string
          example: 'polygon'
          default: 'polygon'
        name:
          type: string
          description: Name given to the fence.
          example: 'Polygon name'
        color:
          type: string
          description: Hash code representing the color of the Geofence. For example, “#FFFFFF” is white.
          example: '#FEFEFE'
        vertices:
          type: array
          description: A polygon is made of multiple vertices. In the JSON, vertices is an array of more than 3 points, each having a latitude and longitude.
          items:
            $ref: '#/definitions/Point'
          example: [{longitude: -37.812873, latitude: 144.977705}, {longitude: -37.810212, latitude: 144.983070}]
  BoundingBox:
    type: object
    required:
      - name
      - northEast
      - southWest
    description: A geofence that contains the area between two latitude and two longitudes.
    allOf:
    - $ref: '#/definitions/Geofeature'
    - type: object
      properties:
        type:
          type: string
          example: 'boundingBox'
          default: 'boundingBox'
        name:
          type: string
          description: Name given to the fence.
          example: 'Bounding Box name'
        color:
          type: string
          description: Hash code representing the color of the Geofence. For example, “#FFFFFF” is white.
          example: '#FEFEFE'
        northEast:
          description: Coordinates for the north-east point of a bounding box. It consists of a latitude and longitude fields.
          $ref: '#/definitions/Point'
        southWest:
          description: Coordinates for the south-west point of a bounding box. It consists of a latitude and longitude fields.
          $ref: '#/definitions/Point'

  # actions
  Url:
    type: object
    required:
      - url
    description: An additional action that opens a URL when a device triggers a zone.
    allOf:
    - $ref: '#/definitions/Action'
    - type: object
      properties:
        url:
          type: string
          description: URL that will be opened when the device enters a zone.
          example: 'https://bluedot.io'
  Message:
    type: object
    required:
      - title
      - message
    description: An additional action that displays an in-app message when a device triggers a zone.
    allOf:
    - $ref: '#/definitions/Action'
    - type: object
      properties:
        title:
          type: string
          description: Title of the message displayed on the device.
          example: 'A default message title'
        message:
          type: string
          description: Body of the message displayed on the device.
          example: 'A default message'

  # conditions
  Speed:
    type: object
    required:
      - minimumSpeed
      - maximumSpeed
    description: A condition that a device is moving within specific speed(meters/second) range before the zone can trigger.
    allOf:
    - $ref: '#/definitions/Condition'
    - type: object
      properties:
        minimumSpeed:
          type: number
          description: The minimum speed for the action to trigger.
          minimum: 0
          example: 0
        maximumSpeed:
          type: number
          description: The maximum speed for the action to trigger.
          minimum: 5
          example: 5
  TravelDirection:
    type: object
    required:
      - fromAngle
      - toAngle
    description: A condition that a device is moving in a specific direction (represented as clockwise angle from magnetic North) before the zone can trigger. From Angle and To Angle must be separated by at least 90 degrees in either direction.
    allOf:
    - $ref: '#/definitions/Condition'
    - type: object
      properties:
        fromAngle:
          type: integer
          description: The from-angle for the action to trigger.
          minimum: 0
          maximum: 359
          example: 0
        toAngle:
          type: integer
          description: The to-angle for the action to trigger.
          minimum: 0
          maximum: 359
          example: 10
  TravelPath:
    type: object
    required:
      - minimumGeofeaturesCrossed
      - timeOutSeconds
    description: A condition that a device triggers two or more geofeatures before the zone can be triggered.
    allOf:
    - $ref: '#/definitions/Condition'
    - type: object
      properties:
        minimumGeofeaturesCrossed:
          type: integer
          description: The number of Geofeatures need to be crossed.
          minimum: 2
          example: 2
        timeOutSeconds:
          type: integer
          description: Time period within which the number of Geofeatures noted in the minimumGeofeaturesCrossed field must be crossed.
          minimum: 60
          maximum: 86400
          example: 600
        sequential:
          type: boolean
          description: Requires that Geofeatures be crossed in sequence.
          example: true
  TimeActive:
    type: object
    required:
      - fromTime
      - toTime
    description: A condition that the local time on the device is within a certain range before the zone can be triggered.
    allOf:
    - $ref: '#/definitions/Condition'
    - type: object
      properties:
        fromTime:
          type: string
          description: The start time from when the action would be triggered.
          pattern: '^(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])$'
          example: '11:30:00'
        toTime:
          type: string
          description: The end time after when the action would not be triggered.
          pattern: '^(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])$'
          example: '21:30:00'
  DayRange:
    type: object
    description: A condition that the local date on the device is within a certain range before the zone can be triggered. Must have a startDate, endDate, or both.
    allOf:
    - $ref: '#/definitions/Condition'
    - type: object
      properties:
        startDate:
          type: string
          description: The start date from when the action should be triggered.
          format: date
          example: '2016-01-01'
        endDate:
          type: string
          description: The end date after when the action would not be triggered.
          format: date
          example: '2017-12-30'

  ### schema level 2
  WebhookObject:
    type: object
    description: A configuration object to specify details on how webhooks should be passed. For example, a webhook can be registered to track events such as a check-in.
    properties:
      url:
        type: string
        pattern: '^((http[s]?|ftp):\/)?\/?([^:\/\s]+)((\/\w+)*\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$/'
        example: 'https://google.com/webhookEndpoint'
      type:
        type: string
        description: Type of the trigger. Only support 'trigger' for now.
        enum:
         - trigger
      headers:
        type: object
        description: Custom header sent along with the webhook request. Only one header can be added for now.
        additionalProperties:
          type: string
        example:
          authToken: '98f4690e-1a89-4a23-a9bf-3f8c0e7cdee9'
    required:
      - type
      - url
  Geofeature:
    type: object
    discriminator: type
    description: A representation of a physical world trigger. Parent class of Circle, BoundingBox, Polygon, Geoline, and ZoneBeacon.
    properties:
      name:
        type: string
        description: Name for geafeature being created.
        example: 'default name'
      type:
        type: string
        description: 'Type of geofeatures and must be one of these options: circle, geoline, beacon, polygon, boundingBox'
        example: 'circle'
        enum:
          - circle
          - geoline
          - beacon
          - polygon
          - boundingBox
    required:
      - name
      - type
    example: {
                "type": "beacon",
                "name": "create beacon",
                "proximityUUID": "23a01af0-232a-4518-9c0e-323fb773f5ef",
                "location": {
                  "latitude": -37.8159544565362,
                  "longitude": 144.9723565578461
                },
                "beaconType": "both",
                "major": 12321,
                "minor": 56466,
                "txPower": -77,
                "macAddress": "01:17:c5:31:84:19"
             }
  GeofeatureResponse:
    allOf:
    - type: object
      properties:
        _id:
          type: string
          description: The identifier of the Geofeature.
          example: 280f5dab-df8d-4357-899f-5f718338be7b
    - $ref: '#/definitions/Geofeature'
    example: {
                "_id": "280f5dab-df8d-4357-899f-5f718338be7b",
                "type": "beacon",
                "name": "create beacon",
                "proximityUUID": "23a01af0-232a-4518-9c0e-323fb773f5ef",
                "location": {
                  "latitude": -37.8159544565362,
                  "longitude": 144.9723565578461
                },
                "beaconType": "both",
                "major": 12321,
                "minor": 56466,
                "txPower": -77,
                "macAddress": "01:17:c5:31:84:19"
              }
  Action:
    type: object
    description: An additional action. Parent class for Message and Url.
    discriminator: type
    properties:
      type:
        type: string
        description: Type of an action and must be either message or url
        enum:
          - message
          - url
        example: 'message'
    required:
      - type
    example: {type: 'message', title: 'a default title', message: 'a default message'}
  Condition:
    type: object
    description: A condition that must be met before the zone can be triggered. Parent class for Speed, TravelDirection, TravelPath, TimeActive, and DayRange.
    properties:
      type:
        type: string
        description: 'Type of a condition and must be one of these options: speed, travelDirection, travelPath, timeActive, and dayRange.'
        enum:
          - speed
          - travelDirection
          - travelPath
          - timeActive
          - dayRange
    required:
      - type
    example: {type: 'speed', minimumSpeed: 0, maximumSpeed: 5}
  MinimumRetriggerTime:
    type: integer
    description: The minimum time in seconds that is utilized to preclude unwanted, multiple triggers within a Zone. This can be due to, for example, a user remaining stationary after a trigger.
    minimum: 60
    maximum: 3599940
    example: 600
  ZoneCluster:
    type: object
    description: A cluster of zones. Used for rendering areas with large numbers of zones on a map.
    properties:
      point:
        type: string
        description: The location of the cluster.
        example: '150.34565,-24.44556'
      count:
        type: number
        description: The number of zones in a cluster. This field is returned if the area has more than 500 Zones around the point.
        example: '350'
      additionalCount:
        type: boolean
        example: true
  ZonesCount:
    type: object
    description: Number of zones in a project
    properties:
      count:
        type: number
        description: Number of zones in a Project
        example: '400'
  ### schema level 1
  ProjectPermission:
    type: object
    description: A level of permission assigned to a user on a per-project basis.
    properties:
      projectId:
        type: string
        description: The identifier of the project associated with an account.
        example: ec09f506-44c8-482d-92d0-4ee57d5c42b4
      permissionLevel:
        type: string
        enum:
          - READ
          - READ_WRITE
  Project:
    type: object
    description: An object which can be connected with a mobile application. Contains a set of zones, and a configuration to reflect the behaviour desired from the application.
    required:
      - name
      - nextRuleUpdateInterval
    properties:
      name:
        type: string
        description: Name of the project.
        example: 'A Sample Project'
      nextRuleUpdateInterval:
        example: 600
        type: integer
        description: A mobile device will wait for the interval to lapse before subsequently downloading the rules from the server. A longer interval will help save your users battery.
        minimum: 300
        maximum: 172800
      webhooks:
        type: array
        description: A list of webhook objects that specify details on how webhook should be passed. For example, a webhook can be registered to track events such as a check-in.
        items:
          $ref: '#/definitions/WebhookObject'
      firebaseApiKey:
        type: string
        description: The Web API key from Firebase project settings. Using this key our backend will be able to communicate with Firebase to deliver the zones that need to be synced to your application.
  ProjectResponse:
    allOf:
    - type: object
      properties:
        _id:
          type: string
          description: The identifier of the project.
          example: ec09f506-44c8-482d-92d0-4ee57d5c42b4
    - $ref: '#/definitions/Project'
  User:
    description: A user that may login to Canvas or use the API.
    type: object
    properties:
      email:
        type: string
        description: Email address of the user
        example: johnsmith@company.com
      username:
        type: string
        description: Email address is also used as username.
        example: johnsmith@company.com
      firstName:
        type: string
        description: First name of the user.
        example: John
      lastName:
        type: string
        description: Last name of the user.
        example: Smith
      phoneNumber:
        type: string
        description: Phone number of the user.
      isAdmin:
        type: boolean
        description: The user is an admin or not.
        example: true
      accountId:
        type: string
        description: The identifier of the account that the user belongs to.
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        example: 'fd53348f-8dfb-4213-b154-ec0b22a2f15f'
      projectPermissions:
        type: array
        description:  The level of permission provided to the user per project.
        items:
          $ref: '#/definitions/ProjectPermission'
    required:
      - email
      - firstName
      - lastName
      - isAdmin
      - username
  UserResponse:
     allOf:
     - type: object
       properties:
         _id:
           type: string
           description: The identifier of the user.
           example: ec09f506-44c8-482d-92d0-4ee57d5c42b4
     - $ref: '#/definitions/User'
  Zone:
    type: object
    description: One or more geofeatures (geofences or beacons) that will trigger if a device interacts with a geofeature as specified while all conditions are met.
    required:
      - name
      - minimumRetriggerTime
      - geofeatures
      - projectId
    properties:
      name:
        type: string
        description: Name of the zone.
        example: 'Example zone name'
      minimumRetriggerTime:
        $ref: '#/definitions/MinimumRetriggerTime'
      triggerOnExit:
        type: boolean
        description: When a device exits a fence or the range of a beacon, a callback will be sent to the application from the SDK. By default triggerOnExit is false.
        example: true
      geofeatures:
        type: array
        items:
          $ref: '#/definitions/Geofeature'
      customData:
        $ref: '#/definitions/CustomData'
      conditions:
        type: array
        items:
          $ref: '#/definitions/Condition'
      tags:
        type: array
        items:
          type: string
          description: custom tags
        example: ['lines', 'borders', 'stripes']
      actions:
        type: array
        items:
          $ref: '#/definitions/Action'
      projectId:
        type: string
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        example: 'c7058934-f1e6-4176-8730-a0bd28e8e0a9'
  ZoneResponse:
    type: object
    description: One or more geofeatures (geofences or beacons) that will trigger if a device interacts with a geofeature as specified while all conditions are met.
    required:
      - name
      - minimumRetriggerTime
      - geofeatures
      - projectId
    properties:
      _id:
        type: string
        description: The identifier of the zone.
        example: ec09f506-44c8-482d-92d0-4ee57d5c42b4
      name:
        type: string
        description: Name of the zone.
        example: 'Example zone name'
      minimumRetriggerTime:
        $ref: '#/definitions/MinimumRetriggerTime'
      triggerOnExit:
        type: boolean
        description: When a device exits a fence or the range of a beacon, a custom action will be triggered. By default triggerOnExit is false.
        example: true
      geofeatures:
        type: array
        items:
          $ref: '#/definitions/GeofeatureResponse'
      customData:
        $ref: '#/definitions/CustomData'
      conditions:
        type: array
        items:
          $ref: '#/definitions/Condition'
      tags:
        type: array
        items:
          type: string
          description: custom tags
        example: ['lines', 'borders', 'stripes']
      actions:
        type: array
        items:
          $ref: '#/definitions/Action'
      projectId:
        type: string
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        example: 'c7058934-f1e6-4176-8730-a0bd28e8e0a9'
  Credentials:
    type: object
    properties:
      email:
        type: string
        description: Email address of the user for authentication.
        example: 'swagger@bluedot.io'
      password:
        type: string
        description: Password of the user for authentication.
        example: 'password123'
  AuthenticationTokens:
    type: object
    properties:
      idToken:
        type: string
        description: The ID Token is a JSON Web Token (JWT) that contains user profile information (such as the user's name and email).
      accessToken:
        type: string
        description: An Access Token is a credential that can be used by an application to access an API.
      refreshToken:
        type: string
        description: a special token that can be used to obtain a renewed access token.
  AuthenticationRefreshTokens:
    type: object
    properties:
      idToken:
        type: string
        description: The ID Token is a JSON Web Token (JWT) that contains user profile information (such as the user's name and email).
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      accessToken:
        type: string
        description: An Access Token is a credential that can be used by an application to access an API.
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      expiresIn:
        type: number
        example: 3600
        description: The expiration period of the access token in seconds.
      tokenType:
        type: string
        example: Bearer
        description: The token type (i.e Bearer).
  RefreshToken:
    type: object
    properties:
      refreshToken:
        type: string
        description: a special token that can be used to obtain a renewed access token.
  Email:
    type: object
    properties:
      email:
        type: string
        description: Email address of account to be reset
        example: 'jsmith@bluedot.io'
  PasswordReset:
    type: object
    properties:
      email:
        type: string
        description: Email address of account to be reset
        example: 'jsmith@bluedot.io'
      password:
        type: string
        description: 'New password to be reset. Note: Password length of at least 6 characters, as well as requiring numbers, special characters, uppercase and lowercase letters.'
        example: 'password123'
      verificationCode:
        type: string
        description: generated code sent via email
        example: '749307'
  PasswordNew:
    type: object
    properties:
      email:
        type: string
        description: Email address of account to be reset
        example: 'jsmith@bluedot.io'
      temporaryPassword:
        type: string
        description: generated code sent via email
        example: '123456'
      newPassword:
        type: string
        description: 'New password to be reset. Note: Password length of at least 6 characters, as well as requiring numbers, special characters, uppercase and lowercase letters.'
        example: 'password123'
externalDocs:
  description: Find out more about Bluedot Innovation
  url: https://bluedot.io
